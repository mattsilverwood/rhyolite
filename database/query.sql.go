// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO note (
    title, content 
) VALUES (
    ?, ?
)
RETURNING id, title, content
`

type CreateNoteParams struct {
	Title   string
	Content sql.NullString
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Title, arg.Content)
	var i Note
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const deleteNoteById = `-- name: DeleteNoteById :exec
DELETE FROM note WHERE id = ?
`

func (q *Queries) DeleteNoteById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNoteById, id)
	return err
}

const getNoteById = `-- name: GetNoteById :one
SELECT id, title, content FROM note WHERE id = ? LIMIT 1
`

func (q *Queries) GetNoteById(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteById, id)
	var i Note
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const listAllNotes = `-- name: ListAllNotes :many
SELECT id, title, content FROM note
`

func (q *Queries) ListAllNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.ID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNoteById = `-- name: UpdateNoteById :one
UPDATE note set title = ?, content = ? WHERE id = ? RETURNING id, title, content
`

type UpdateNoteByIdParams struct {
	Title   string
	Content sql.NullString
	ID      int64
}

func (q *Queries) UpdateNoteById(ctx context.Context, arg UpdateNoteByIdParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNoteById, arg.Title, arg.Content, arg.ID)
	var i Note
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}
